import{_ as a,c as t,o as i,ag as o}from"./chunks/framework.Ds6Eueu6.js";const m=JSON.parse('{"title":"Ограничения запросов (Rate Limit)","description":"","frontmatter":{},"headers":[],"relativePath":"terms/limits.md","filePath":"terms/limits.md","lastUpdated":1741276885000}'),s={name:"terms/limits.md"};function l(d,e,r,n,c,h){return i(),t("div",null,e[0]||(e[0]=[o('<h1 id="ограничения-запросов-rate-limit" tabindex="-1">Ограничения запросов (Rate Limit) <a class="header-anchor" href="#ограничения-запросов-rate-limit" aria-label="Permalink to &quot;Ограничения запросов (Rate Limit)&quot;">​</a></h1><h2 id="общая-информация" tabindex="-1">Общая информация <a class="header-anchor" href="#общая-информация" aria-label="Permalink to &quot;Общая информация&quot;">​</a></h2><p>Ограничение запросов в API применяется для каждой пары <code>пользователь + URL path</code> по количеству запросов <code>N</code> во временной интервал <code>T</code>.</p><p>Если лимит превышен, сервер возвращает ошибку <strong><code>429 (Too Many Requests)</code></strong> с ответом:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;detail&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Rate limit exceeded&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><h2 id="параметры-ограничении" tabindex="-1">Параметры ограничений <a class="header-anchor" href="#параметры-ограничении" aria-label="Permalink to &quot;Параметры ограничений&quot;">​</a></h2><ul><li><strong>Пара:</strong> <code>пользователь + URL path</code></li><li><strong>Максимальное количество запросов (<code>N</code>):</strong> <code>10</code></li><li><strong>Временной интервал (<code>T</code>):</strong> <code>60 секунд</code></li><li><strong>Запросы без авторизации:</strong> <code>не учитываются</code></li></ul><h2 id="разблокировка" tabindex="-1">Разблокировка <a class="header-anchor" href="#разблокировка" aria-label="Permalink to &quot;Разблокировка&quot;">​</a></h2><p>В случае срабатывания блокировки (<code>Rate limit exceeded</code>) она будет автоматически снята только после прохождения временного интервала (<code>T</code>). <strong><em>Повторные попытки запросов раньше, чем через <code>T</code> секунд - продлевают блокировку</em></strong></p><h2 id="рекомендации" tabindex="-1">Рекомендации <a class="header-anchor" href="#рекомендации" aria-label="Permalink to &quot;Рекомендации&quot;">​</a></h2><ul><li>В случае превышения лимита запросов не отправляйте запросы в течение временного интервала <code>T + 1</code>.</li><li>Используйте механизмы контроля частоты запросов (rate limiting) на стороне клиента.</li></ul>',11)]))}const u=a(s,[["render",l]]);export{m as __pageData,u as default};
